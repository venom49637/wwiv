#!/bin/bash
#
# WWIV Build Script.
#
# Required Variables:
#   WORKSPACE - Jenkins workspace
#   BUILD_NUMBER - Jenkins Build number

source ${WORKSPACE}/builds/jenkins/wwiv/build.bash

rm ${WORKSPACE}/wwiv-*.tar.gz

set -e

declare -r CMAKE_BUILD="${WORKSPACE}/_build"
declare -r RELEASE_DIR="${WORKSPACE}/release"
declare -r WWIV_RELEASE="5.4"
declare -r WWIV_FULL_RELEASE="5.4.0"
declare -r RELEASE_TGZ=${WORKSPACE}/wwiv-linux-${label}-${WWIV_RELEASE}.${BUILD_NUMBER}.tar.gz
echo "WWIV BBS Build"
echo "Workspace:        ${WORKSPACE}"
echo "CMake:            ${CMAKE_BIN}"
echo "CMake Build:      ${CMAKE_BUILD}"
echo "Release Dir:      ${RELEASE_DIR}"
echo "WWI Full Release: ${WWIV_FULL_RELEASE}"
echo "WWIV Release:     ${WWIV_RELEASE}"
echo "Version:          ${BUILD_NUMBER}"
echo "Archive:          ${RELEASE_TGZ}"
echo "Label:            ${label}"

echo "Ensuring CMAKE_BUILD exists: (${CMAKE_BUILD})"
if [[ ! -d "${CMAKE_BUILD}" ]]; then
  mkdir -p "${CMAKE_BUILD}"
fi
echo "Created release dir: ${RELEASE_DIR}"

echo "Cleaning up release dir (${RELEASE_DIR})"
if [[ -d "${RELEASE_DIR}" ]]; then
  rm -rf "${RELEASE_DIR}"
fi
mkdir -p "${RELEASE_DIR}"
echo "Created release dir: ${RELEASE_DIR}"

build_binaries -j8

echo "Populating built binaries"
cp  ${CMAKE_BUILD}/bbs/bbs \
    ${CMAKE_BUILD}/network/network \
    ${CMAKE_BUILD}/networkb/networkb \
    ${CMAKE_BUILD}/networkc/networkc \
    ${CMAKE_BUILD}/networkf/networkf \
    ${CMAKE_BUILD}/network1/network1 \
    ${CMAKE_BUILD}/network2/network2 \
    ${CMAKE_BUILD}/network3/network3 \
    ${CMAKE_BUILD}/wwivconfig/wwivconfig \
    ${CMAKE_BUILD}/wwivd/wwivd \
    ${CMAKE_BUILD}/wwivutil/wwivutil \
    ${RELEASE_DIR}

echo "Creating inifiles.zip"
cd ${WORKSPACE}/bbs/admin/inifiles
zip -r ${RELEASE_DIR}/inifiles.zip *

echo "Creating data.zip"
cd ${WORKSPACE}/bbs/admin/data
zip -r ${RELEASE_DIR}/data.zip *

echo "Creating gfiles.zip"
cd ${WORKSPACE}/bbs/admin/gfiles
zip -r ${RELEASE_DIR}/gfiles.zip *

echo "Creating scripts.zip"
cd ${WORKSPACE}/bbs/admin/scripts
zip -r ${RELEASE_DIR}/scripts.zip *

echo "Creating zip-city"
cd ${WORKSPACE}/bbs/admin
zip -r ${RELEASE_DIR}/zip-city.zip zip-city/*

echo "Creating regions"
cd ${WORKSPACE}/bbs/admin
zip -r ${RELEASE_DIR}/regions.zip regions/*

echo "adding common files"
cd ${WORKSPACE}/bbs/admin
shopt -s extglob
set +e
cp -v !(*.bat) ${RELEASE_DIR}
RESULT=$?
set -e
# cp returns non-zero if we skip directories, so do our own check
if [[ $RESULT -gt 1 ]]
then
  exit 1
fi
shopt -u extglob

echo "adding linux-specific files"
cd ${WORKSPACE}/bbs/admin/unix
shopt -s dotglob
cp -a * ${RELEASE_DIR}
shopt -u dotglob

echo "Creating build.nfo file"
echo "Build URL ${BUILD_URL}" > ${RELEASE_DIR}/build.nfo
echo "Build Version: ${BUILD_NUMBER}" >> ${RELEASE_DIR}/build.nfo

echo "Creating release archive: ${RELEASE_TGZ}"
cd ${RELEASE_DIR}
shopt -s dotglob
tar zcvf ${RELEASE_TGZ} * 
shopt -u dotglob

echo "Archive file: ${RELEASE_TGZ}"
echo "File Contents:"
tar ztvf ${RELEASE_TGZ}
